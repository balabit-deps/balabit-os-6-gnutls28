From 8ee8a53bef77be018c4eeb261309846f261a35c8 Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos <nmav@redhat.com>
Date: Thu, 31 Mar 2016 16:58:37 +0200
Subject: [PATCH] certtool: added flag to allow verification using broken
 algorithms

---
 src/certtool-args.def |  6 ++++++
 src/certtool.c        | 19 +++++++++++++++----
 2 files changed, 21 insertions(+), 4 deletions(-)

--- a/src/certtool-args.def
+++ b/src/certtool-args.def
@@ -111,6 +111,12 @@ flag = {
 };
 
 flag = {
+    name      = verify-allow-broken;
+    descrip   = "Allow broken algorithms, such as MD5 for verification";
+    doc = "This can be combined with --p7-verify, --verify or --verify-chain.";
+};
+
+flag = {
     name      = generate-dh-params;
     descrip   = "Generate PKCS #3 encoded Diffie-Hellman parameters";
     doc = "";
--- a/src/certtool.c
+++ b/src/certtool.c
@@ -2465,6 +2465,7 @@ _verify_x509_mem(const void *cert, int c
 	unsigned int x509_ncerts, x509_ncrls = 0, x509_ncas = 0;
 	gnutls_x509_trust_list_t list;
 	unsigned int output;
+	unsigned vflags;
 
 	ret = gnutls_x509_trust_list_init(&list, 0);
 	if (ret < 0) {
@@ -2571,6 +2572,12 @@ _verify_x509_mem(const void *cert, int c
 	fprintf(stdout, "Loaded %d certificates, %d CAs and %d CRLs\n\n",
 		x509_ncerts, x509_ncas, x509_ncrls);
 
+	vflags = GNUTLS_VERIFY_DO_NOT_ALLOW_SAME;
+
+	if (HAVE_OPT(VERIFY_ALLOW_BROKEN))
+		vflags |= GNUTLS_VERIFY_ALLOW_BROKEN;
+
+
 	if (purpose || hostname || email) {
 		gnutls_typed_vdata_st vdata[2];
 		unsigned vdata_size = 0;
@@ -2599,14 +2606,14 @@ _verify_x509_mem(const void *cert, int c
 						       x509_ncerts,
 						       vdata,
 						       vdata_size,
-						       GNUTLS_VERIFY_DO_NOT_ALLOW_SAME,
+						       vflags,
 						       &output,
 						       detailed_verification);
 	} else { 
 		ret =
 		    gnutls_x509_trust_list_verify_crt(list, x509_cert_list,
 						      x509_ncerts,
-						      GNUTLS_VERIFY_DO_NOT_ALLOW_SAME,
+						      vflags,
 						      &output,
 						      detailed_verification);
 	}
@@ -2895,6 +2902,7 @@ void verify_pkcs7(common_info_st * cinfo
 	gnutls_typed_vdata_st vdata[2];
 	unsigned vdata_size = 0;
 	gnutls_x509_crt_t signer = NULL;
+	unsigned flags = 0;
 
 	ret = gnutls_pkcs7_init(&pkcs7);
 	if (ret < 0) {
@@ -2983,10 +2991,13 @@ void verify_pkcs7(common_info_st * cinfo
 
 		gnutls_pkcs7_signature_info_deinit(&info);
 
+		if (HAVE_OPT(VERIFY_ALLOW_BROKEN))
+			flags |= GNUTLS_VERIFY_ALLOW_BROKEN;
+
 		if (signer)
-			ret = gnutls_pkcs7_verify_direct(pkcs7, signer, i, detached.data!=NULL?&detached:NULL, 0);
+			ret = gnutls_pkcs7_verify_direct(pkcs7, signer, i, detached.data!=NULL?&detached:NULL, flags);
 		else
-			ret = gnutls_pkcs7_verify(pkcs7, tl, vdata, vdata_size, i, detached.data!=NULL?&detached:NULL, 0);
+			ret = gnutls_pkcs7_verify(pkcs7, tl, vdata, vdata_size, i, detached.data!=NULL?&detached:NULL, flags);
 		if (ret < 0) {
 			fprintf(stderr, "\tSignature status: verification failed: %s\n", gnutls_strerror(ret));
 			ecode = 1;
