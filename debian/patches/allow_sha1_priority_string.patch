Backport of:

From eb3650c4602ea9b92cfd084ef417bc7f6b89555c Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos <nmav@redhat.com>
Date: Mon, 13 Mar 2017 17:13:48 +0100
Subject: [PATCH] Introduced flag GNUTLS_VERIFY_ALLOW_SIGN_WITH_SHA1

This allows performing a verification with only SHA1 allowed
from the broken algorithms. This can be used to fine-tune
verification in case default verification fails, to detect
whether the failed algorithm was SHA1.

Signed-off-by: Nikos Mavrogiannopoulos <nmav@redhat.com>
---
 doc/cha-cert-auth.texi     |  1 +
 doc/cha-gtls-app.texi      |  3 +++
 lib/includes/gnutls/x509.h |  5 ++++-
 lib/priority.c             |  5 +++++
 lib/priority_options.gperf |  1 +
 lib/x509/verify.c          | 12 ++++++++++--
 6 files changed, 24 insertions(+), 3 deletions(-)

--- a/doc/cha-cert-auth.texi
+++ b/doc/cha-cert-auth.texi
@@ -752,6 +752,7 @@ certificate chain, you can call
 @itemize
 @item @code{GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD2}
 @item @code{GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD5}
+@item @code{GNUTLS_VERIFY_ALLOW_SIGN_WITH_SHA1}
 @item @code{GNUTLS_VERIFY_ALLOW_BROKEN}
 @end itemize
 as in the following example:
--- a/doc/cha-gtls-app.texi
+++ b/doc/cha-gtls-app.texi
@@ -1265,6 +1265,9 @@ SHA1) in certificate chains.
 @item %VERIFY_ALLOW_SIGN_RSA_MD5 @tab
 will allow RSA-MD5 signatures in certificate chains.
 
+@item %VERIFY_ALLOW_SIGN_WITH_SHA1 @tab
+will allow signatures with SHA1 hash algorithm in certificate chains.
+
 @item %VERIFY_DISABLE_CRL_CHECKS @tab
 will disable CRL or OCSP checks in the verification of the certificate chain.
 
--- a/lib/includes/gnutls/x509.h
+++ b/lib/includes/gnutls/x509.h
@@ -810,6 +810,8 @@ int gnutls_x509_crl_set_number(gnutls_x5
  *   using the broken MD2 algorithm.
  * @GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD5: Allow certificates to be signed
  *   using the broken MD5 algorithm.
+ * @GNUTLS_VERIFY_ALLOW_SIGN_WITH_SHA1: Allow certificates to be signed
+ *   using the broken SHA1 hash algorithm.
  * @GNUTLS_VERIFY_ALLOW_BROKEN: Allow certificates to be signed
  *   using any broken algorithm.
  * @GNUTLS_VERIFY_DISABLE_TIME_CHECKS: Disable checking of activation
@@ -839,7 +841,8 @@ typedef enum gnutls_certificate_verify_f
 	GNUTLS_VERIFY_ALLOW_UNSORTED_CHAIN = 1 << 10,
 	GNUTLS_VERIFY_DO_NOT_ALLOW_UNSORTED_CHAIN = 1 << 11,
 	GNUTLS_VERIFY_DO_NOT_ALLOW_WILDCARDS = 1 << 12,
-	GNUTLS_VERIFY_USE_TLS1_RSA = 1 << 13
+	GNUTLS_VERIFY_USE_TLS1_RSA = 1 << 13,
+	GNUTLS_VERIFY_ALLOW_SIGN_WITH_SHA1 = 1 << 15,
 	/* cannot exceed 2^24 due to GNUTLS_PROFILE_TO_VFLAGS() */
 } gnutls_certificate_verify_flags;
 
--- a/lib/gnutls_priority.c
+++ b/lib/gnutls_priority.c
@@ -817,6 +817,11 @@ static void enable_verify_allow_rsa_md5(
 	c->additional_verify_flags |=
 	    GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD5;
 }
+static void enable_verify_allow_sha1(gnutls_priority_t c)
+{
+	c->additional_verify_flags |=
+	    GNUTLS_VERIFY_ALLOW_SIGN_WITH_SHA1;
+}
 static void enable_verify_allow_broken(gnutls_priority_t c)
 {
 	c->additional_verify_flags |=
--- a/lib/priority_options.gperf
+++ b/lib/priority_options.gperf
@@ -15,6 +15,7 @@ NO_SESSION_HASH, enable_no_ext_master_se
 STATELESS_COMPRESSION, enable_stateless_compression
 VERIFY_ALLOW_BROKEN, enable_verify_allow_broken
 VERIFY_ALLOW_SIGN_RSA_MD5, enable_verify_allow_rsa_md5
+VERIFY_ALLOW_SIGN_WITH_SHA1, enable_verify_allow_sha1
 VERIFY_DISABLE_CRL_CHECKS, disable_crl_checks
 SSL3_RECORD_VERSION, enable_ssl3_record_version
 LATEST_RECORD_VERSION, enable_latest_record_version
--- a/lib/x509/verify.c
+++ b/lib/x509/verify.c
@@ -385,6 +385,12 @@ static unsigned int check_time_status(gn
 static
 int is_broken_allowed(gnutls_sign_algorithm_t sig, unsigned int flags)
 {
+	gnutls_digest_algorithm_t hash;
+
+	/* we have a catch all */
+	if ((flags & GNUTLS_VERIFY_ALLOW_BROKEN) == GNUTLS_VERIFY_ALLOW_BROKEN)
+		return 1;
+
 	/* the first two are for backwards compatibility */
 	if ((sig == GNUTLS_SIGN_RSA_MD2)
 	    && (flags & GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD2))
@@ -392,9 +398,11 @@ int is_broken_allowed(gnutls_sign_algori
 	if ((sig == GNUTLS_SIGN_RSA_MD5)
 	    && (flags & GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD5))
 		return 1;
-	/* we no longer have individual flags - but rather a catch all */
-	if ((flags & GNUTLS_VERIFY_ALLOW_BROKEN) == GNUTLS_VERIFY_ALLOW_BROKEN)
+
+	hash = gnutls_sign_get_hash_algorithm(sig);
+	if (hash == GNUTLS_DIG_SHA1 && (flags & GNUTLS_VERIFY_ALLOW_SIGN_WITH_SHA1))
 		return 1;
+
 	return 0;
 }
 
--- a/lib/priority_options.h
+++ b/lib/priority_options.h
@@ -1,6 +1,6 @@
 /* ANSI-C code produced by gperf version 3.0.4 */
 /* Command-line: gperf --global-table -t priority_options.gperf  */
-/* Computed positions: -k'9,$' */
+/* Computed positions: -k'1,$' */
 
 #if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
       && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
@@ -36,12 +36,12 @@ static const struct priority_options_st
 #line 7 "priority_options.gperf"
 struct priority_options_st { const char *name; option_set_func func; };
 
-#define TOTAL_KEYWORDS 29
+#define TOTAL_KEYWORDS 30
 #define MIN_WORD_LENGTH 6
 #define MAX_WORD_LENGTH 27
 #define MIN_HASH_VALUE 6
-#define MAX_HASH_VALUE 74
-/* maximum key range = 69, duplicates = 0 */
+#define MAX_HASH_VALUE 52
+/* maximum key range = 47, duplicates = 0 */
 
 #ifdef __GNUC__
 __inline
@@ -55,118 +55,107 @@ hash (register const char *str, register
 {
   static const unsigned char asso_values[] =
     {
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      15, 75, 75, 10, 75, 75, 10, 75, 75, 75,
-      75, 75, 75, 75, 75,  5, 75, 75, 75, 10,
-      75, 25,  0, 10, 75,  0,  5, 30,  0, 10,
-      75, 75, 20,  0,  5,  5,  5,  0, 75,  0,
-      75, 75, 75, 75, 75,  0, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
-      75, 75, 75, 75, 75, 75
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 20,
+      25, 53, 53,  5, 53, 53, 20, 53, 53, 53,
+      53, 53, 53, 53, 53, 10, 53,  0,  5, 20,
+       5,  3,  0, 53, 53,  5, 20, 30,  0, 53,
+       5, 53, 53,  0,  0,  0,  5,  0, 53, 10,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
+      53, 53, 53, 53, 53, 53
     };
-  register int hval = len;
-
-  switch (hval)
-    {
-      default:
-        hval += asso_values[(unsigned char)str[8]];
-      /*FALLTHROUGH*/
-      case 8:
-      case 7:
-      case 6:
-        break;
-    }
-  return hval + asso_values[(unsigned char)str[len - 1]];
+  return len + asso_values[(unsigned char)str[len - 1]] + asso_values[(unsigned char)str[0]];
 }
 
 static const struct priority_options_st wordlist[] =
   {
     {""}, {""}, {""}, {""}, {""}, {""},
-#line 10 "priority_options.gperf"
-    {"DUMBFW", enable_dumbfw},
-    {""}, {""}, {""}, {""},
 #line 9 "priority_options.gperf"
     {"COMPAT", enable_compat},
-#line 33 "priority_options.gperf"
-    {"PROFILE_HIGH", enable_profile_high},
-#line 11 "priority_options.gperf"
-    {"NO_EXTENSIONS", enable_no_extensions},
-    {""},
+    {""}, {""}, {""},
 #line 12 "priority_options.gperf"
     {"NO_TICKETS", enable_no_tickets},
-#line 30 "priority_options.gperf"
-    {"PROFILE_LOW", enable_profile_low},
-#line 27 "priority_options.gperf"
-    {"DISABLE_WILDCARDS", disable_wildcards},
-#line 26 "priority_options.gperf"
-    {"FALLBACK_SCSV", enable_fallback_scsv},
-#line 31 "priority_options.gperf"
-    {"PROFILE_LEGACY", enable_profile_legacy},
+#line 10 "priority_options.gperf"
+    {"DUMBFW", enable_dumbfw},
     {""},
+#line 11 "priority_options.gperf"
+    {"NO_EXTENSIONS", enable_no_extensions},
+#line 38 "priority_options.gperf"
+    {"NEW_PADDING", dummy_func},
+#line 14 "priority_options.gperf"
+    {"NO_SESSION_HASH", enable_no_ext_master_secret},
+#line 31 "priority_options.gperf"
+    {"PROFILE_LOW", enable_profile_low},
+#line 34 "priority_options.gperf"
+    {"PROFILE_HIGH", enable_profile_high},
+#line 24 "priority_options.gperf"
+    {"SAFE_RENEGOTIATION", enable_safe_renegotiation},
+#line 20 "priority_options.gperf"
+    {"SSL3_RECORD_VERSION", enable_ssl3_record_version},
+#line 23 "priority_options.gperf"
+    {"UNSAFE_RENEGOTIATION", enable_unsafe_renegotiation},
 #line 15 "priority_options.gperf"
     {"STATELESS_COMPRESSION", enable_stateless_compression},
-#line 29 "priority_options.gperf"
-    {"PROFILE_VERY_WEAK", enable_profile_very_weak},
-#line 34 "priority_options.gperf"
-    {"PROFILE_ULTRA", enable_profile_ultra},
+#line 28 "priority_options.gperf"
+    {"DISABLE_WILDCARDS", disable_wildcards},
+#line 27 "priority_options.gperf"
+    {"FALLBACK_SCSV", enable_fallback_scsv},
 #line 16 "priority_options.gperf"
     {"VERIFY_ALLOW_BROKEN", enable_verify_allow_broken},
-#line 14 "priority_options.gperf"
-    {"NO_SESSION_HASH", enable_no_ext_master_secret},
+    {""},
 #line 25 "priority_options.gperf"
-    {"DISABLE_SAFE_RENEGOTIATION", disable_safe_renegotiation},
+    {"PARTIAL_RENEGOTIATION", enable_partial_safe_renegotiation},
+#line 30 "priority_options.gperf"
+    {"PROFILE_VERY_WEAK", enable_profile_very_weak},
 #line 35 "priority_options.gperf"
-    {"PROFILE_SUITEB128", enable_profile_suiteb128},
-#line 23 "priority_options.gperf"
-    {"SAFE_RENEGOTIATION", enable_safe_renegotiation},
+    {"PROFILE_ULTRA", enable_profile_ultra},
+#line 32 "priority_options.gperf"
+    {"PROFILE_LEGACY", enable_profile_legacy},
 #line 19 "priority_options.gperf"
-    {"SSL3_RECORD_VERSION", enable_ssl3_record_version},
-#line 22 "priority_options.gperf"
-    {"UNSAFE_RENEGOTIATION", enable_unsafe_renegotiation},
-#line 20 "priority_options.gperf"
-    {"LATEST_RECORD_VERSION", enable_latest_record_version},
-#line 36 "priority_options.gperf"
-    {"PROFILE_SUITEB192", enable_profile_suiteb192},
-    {""}, {""},
-#line 18 "priority_options.gperf"
     {"VERIFY_DISABLE_CRL_CHECKS", disable_crl_checks},
-#line 13 "priority_options.gperf"
-    {"NO_ETM", enable_no_etm},
-#line 21 "priority_options.gperf"
+#line 26 "priority_options.gperf"
+    {"DISABLE_SAFE_RENEGOTIATION", disable_safe_renegotiation},
+#line 22 "priority_options.gperf"
     {"VERIFY_ALLOW_X509_V1_CA_CRT", dummy_func},
     {""}, {""},
 #line 17 "priority_options.gperf"
     {"VERIFY_ALLOW_SIGN_RSA_MD5", enable_verify_allow_rsa_md5},
-#line 24 "priority_options.gperf"
-    {"PARTIAL_RENEGOTIATION", enable_partial_safe_renegotiation},
+#line 13 "priority_options.gperf"
+    {"NO_ETM", enable_no_etm},
+#line 29 "priority_options.gperf"
+    {"SERVER_PRECEDENCE", enable_server_precedence},
+    {""}, {""}, {""},
+#line 21 "priority_options.gperf"
+    {"LATEST_RECORD_VERSION", enable_latest_record_version},
+#line 36 "priority_options.gperf"
+    {"PROFILE_SUITEB128", enable_profile_suiteb128},
     {""}, {""}, {""}, {""},
 #line 37 "priority_options.gperf"
-    {"NEW_PADDING", dummy_func},
-#line 28 "priority_options.gperf"
-    {"SERVER_PRECEDENCE", enable_server_precedence},
-    {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
-    {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
-    {""}, {""}, {""}, {""}, {""}, {""}, {""}, {""},
-#line 32 "priority_options.gperf"
-    {"PROFILE_MEDIUM", enable_profile_medium}
+    {"PROFILE_SUITEB192", enable_profile_suiteb192},
+    {""},
+#line 33 "priority_options.gperf"
+    {"PROFILE_MEDIUM", enable_profile_medium},
+    {""}, {""},
+#line 18 "priority_options.gperf"
+    {"VERIFY_ALLOW_SIGN_WITH_SHA1", enable_verify_allow_sha1}
   };
 
 #ifdef __GNUC__
